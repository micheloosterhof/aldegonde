def combo_autokey_vigenere_encrypt(
    plaintext: List[int], primer: List[int] = [0], mode: int = 1
) -> List[int]:
    """
    Vigenere primitive without any console output, C=P+K
    """
    plain_key: List[int] = primer + plaintext
    cipher_key: List[int] = primer
    output: List[int] = []
    for j in range(0, len(plaintext)):
        if mode == 1:
            c = (plaintext[j] + plain_key[j] + cipher_key[j]) % MAX
        elif mode == 2:
            c = (plaintext[j] + plain_key[j] - cipher_key[j]) % MAX
        elif mode == 3:
            c = (plaintext[j] - plain_key[j] + cipher_key[j]) % MAX
        elif mode == 4:
            c = (plaintext[j] - plain_key[j] - cipher_key[j]) % MAX
        elif mode == 5:
            c = (-plaintext[j] + plain_key[j] + cipher_key[j]) % MAX
        elif mode == 6:
            c = (-plaintext[j] + plain_key[j] - cipher_key[j]) % MAX
        elif mode == 7:
            c = (-plaintext[j] - plain_key[j] + cipher_key[j]) % MAX
        elif mode == 8:
            c = (-plaintext[j] - plain_key[j] - cipher_key[j]) % MAX
        else:
            raise Exception
        cipher_key.append(c)
        output.append(c)
    return output

def combo_autokey_vigenere_decrypt(
    ciphertext: List[int], primer: List[int] = [0], mode: int = 1
) -> List[int]:
    """
    Vigenere primitive without any console output, C=P+K
    """
    plain_key: List[int] = primer
    cipher_key: List[int] = primer + ciphertext
    output: List[int] = []
    for j in range(0, len(ciphertext)):
        # TODO encrypt and decrypt modes don't match
        if mode == 1:
                p = (ciphertext[j] + plain_key[j] + cipher_key[j]) % MAX
        elif mode == 2:
                p = (ciphertext[j] + plain_key[j] - cipher_key[j]) % MAX
        elif mode == 3:
                p = (ciphertext[j] - plain_key[j] + cipher_key[j]) % MAX
        elif mode == 4:
                p = (ciphertext[j] - plain_key[j] - cipher_key[j]) % MAX
        elif mode == 5:
                p = (-ciphertext[j] + plain_key[j] + cipher_key[j]) % MAX
        elif mode == 6:
                p = (-ciphertext[j] + plain_key[j] - cipher_key[j]) % MAX
        elif mode == 7:
                p = (-ciphertext[j] - plain_key[j] + cipher_key[j]) % MAX
        elif mode == 8:
                p = (-ciphertext[j] - plain_key[j] - cipher_key[j]) % MAX
        else:
            raise Exception
        plain_key.append(p)
        output.append(p)
    return output
