#!/usr/bin/env python3

"""
Jens Guballa's algorithm using piecemeal bigram scoring to break PASC
"""

from typing import TypeVar

from aldegonde import pasc
from aldegonde.stats import compare

from aldegonde.analysis import guballa

ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"


def test_vig():
    # (key len= 14)
    VIG = """DAZFISFSPAVQLSNPXYSZWXALCDAFGQUISMTPHZGAMKTTFTCCFXKFCRGGLPFETZMMMZOZDEADWVZWMWKVGQSOHQSVHPWFKLSLEASEPWHMJEGKPURVSXJXVBWVPOSDETEQTXOBZIKWCXLWNUOVJMJCLLOEOFAZENVMJILOWZEKAZEJAQDILSWWESGUGKTZGQZVRMNWTQSEOTKTKPBSTAMQVERMJEGLJQRTLGFJYGSPTZPGTACMOECBXSESCIYGUFPKVILLTWDKSZODFWFWEAAPQTFSTQIRGMPMELRYELHQSVWBAWMOSDELHMUZGPGYEKZUKWTAMZJMLSEVJQTGLAWVOVVXHKWQILIEUYSZWXAHHUSZOGMUZQCIMVZUVWIFJJHPWVXFSETZEDF"""
    LEN = 14
    VIGTR = pasc.vigenere_tr(ALPHABET)
    out = guballa.bigram_break_pasc(VIG, VIGTR, LEN)
    password = out[0]
    assert password == "AMBROISETHOMAS"

    plaintext = "".join(pasc.pasc_decrypt(VIG, password, VIGTR))
    print(plaintext)


def test_beaufort():
    # key = "FOUNDATION" # (key len= 10)
    BEAU = """EKFNKSPVVUXDJUWWIIWUOAINQIRUUAMXWBZNTVLCRTQWLTPIXBBJGWRCRIUVBOHKCWBADJSVBGDHVUUBFQNJDJSEDFBTQBZVFRCFSKNZQMZROACHUSZJPQZJDVBZRSGEHZSAAWKTTPQZLCUPCWIAKSBMQALGCECJXBWZJJXAWKRCUAAAXIEJHAAWLWGQKVMHUUFMZWOPMHQMZHAEXELLOJVVABKWBNQNQCLVVGXWUVLWHHDPFBWKZACDXFBBRZYYTEWNOWBZWSHAWNHVNNKZCOVTNDGSZHFGOJNODRDIGUDJNWBGDNMAWFAVNJQHMIVIOGQAAXPWOACSNPCJZPUVOACJDUTABVMMUJLACPHFNGCBFAGQSJOBGUKTTPGCRTQKBAPQOWUKCVCGAPHNMGJZIWQRABBCGWZTTFQZLXUUWWCGOJNODRZJPXGSXBONQXQAKNUDCCDFPQVGFBBGDHRIKVFXYJMWQEOKMAJFIWTXDIOKQBZNTQMNBWUWSMYELBBGYJZLOUXGXCUVWWXIWIRXBTQAAEGWBFGFBWTPGUFWNJHABNOCXOHUVTFVATOHMBCGAIWGBSUVDOSAVFRUCFLPPMHFTVNJMWLQVJFXCIPJMAWCRTQEPCOUXGXWPZMHZVKGRBGTMVFRHFNTUCPGCIBKCKUUWVFRHFNOIMVHLUBRYAMVWWCEWZEOCJKTTPSZLDRMZASUBKTOHFYAGKWYBOKIPJMACGFTQFPVOEBKBLYGPSBBKWBWGWJXPPHNMSGTSXGUVMBODZRAGAJNSQCYZAJDAWYGIGDFPAAIAKHKZXXBAFNHQWZIFNGCBVNNKELXDARVJZIWMAWLRUHUMCLDOAHWFJDQOUXGXCNNIWLUJIBBRJASEIUVBJGWDJPTDPMHQAQMGEHNKKMZYVPVLJCGNNIWQUBJSAIZMWAUMNBWUWKTTVQZLWNNSPQUVZEXAUJIABKXLKCUVMGUJGXWRJDHMAWJSXGCSWQABUYKSNOSAUDGXWOCPJVVAUBRBJQGTPKKJHQWZSGBKRFWYZMHMKBZOHMVPVOEBLBWQAYMCGKKAADRWSRBHJNUPIZJPFLJFVNGZJPGABBWNFLZFFQBRUDAZXSKCNOEUAKMGKSGRVNZJUMBKGFLHZWAGFGAYGCKZAABWGFDJWZYPATJMHQMZNPDGURJNFLXVABHFZJNBWLVVGBMGBRMGMKNUVNNLEMAMGRJWZJIMIDCSABRVHMPHFNGRJOACPVGFVUVVIIESBHNQVKPFNKWAADUWWNUAKRJDZRWLBOSBVNJLAHELNZIQWYMCWQVBDPRWWGAVVYOJCOPPIWJTQSZJNARQURBQJAOVFKNMH"""
    BEAUTR = pasc.beaufort_tr(ALPHABET)
    length = 10
    (password, score) = guballa.bigram_break_pasc(BEAU, BEAUTR, length)
    # plaintext = "".join(pasc.pasc_decrypt(BEAU, password, BEAUTR))
    # score = compare.quadgramscore(plaintext)
    # print(score, length, password, plaintext)
    assert password == "FOUNDATION"


def test_variantbeaufort():
    # key = "FOUNDATION" # (key len= 10)
    VARBEAU = """WQVNQILFFGDXRGEESSEGMASNKSJGGAODEZBNHFPYJHKEPHLSDZZRUEJYJSGFZMTQYEZAXRIFZUXTFGGZVKNRXRIWXVZHKZBFVJYVIQNBKOBJMAYTGIBRLKBRXFZBJIUWTBIAAEQHHLKBPYGLYESAQIZOKAPUYWYRDZEBRRDAEQJYGAAADSWRTAAEPEUKQFOTGGVOBEMLOTKOBTAWDWPPMRFFAZQEZNKNKYPFFUDEGFPETTXLVZEQBAYXDVZZJBCCHWENMEZBEITAENTFNNQBYMFHNXUIBTVUMRNMXJXSUGXRNEZUXNOAEVAFNRKTOSFSMUKAADLEMAYINLYRBLGFMAYRXGHAZFOOGRPAYLTVNUYZVAUKIRMZUGQHHLUYJHKQZALKMEGQYFYUALTNOURBSEKJAZZYUEBHHVKBPDGGEEYUMRNMXJBRLDUIDZMNKDKAQNGXYYXVLKFUVZZUXTJSQFVDCROEKWMQOARVSEHDXSMQKZBNHKONZEGEIOCWPZZUCRBPMGDUDYGFEEDSESJDZHKAAWUEZVUVZEHLUGVENRTAZNMYDMTGFHVFAHMTOZYUASEUZIGFXMIAFVJGYVPLLOTVHFNROEPKFRVDYSLROAEYJHKWLYMGDUDELBOTBFQUJZUHOFVJTVNHGYLUYSZQYQGGEFVJTVNMSOFTPGZJCAOFEEYWEBWMYRQHHLIBPXJOBAIGZQHMTVCAUQECZMQSLROAYUVHKVLFMWZQZPCULIZZQEZEUERDLLTNOIUHIDUGFOZMXBJAUARNIKYCBARXAECUSUXVLAASAQTQBDDZAVNTKEBSVNUYZFNNQWPDXAJFRBSEOAEPJGTGOYPXMATEVRXKMGDUDYNNSEPGRSZZJRAIWSGFZRUEXRLHXLOTKAKOUWTNQQOBCFLFPRYUNNSEKGZRIASBOEAGONZEGEQHHFKBPENNILKGFBWDAGRSAZQDPQYGFOUGRUDEJRXTOAERIDUYIEKAZGCQINMIAGXUDEMYLRFFAGZJZRKUHLQQRTKEBIUZQJVECBOTOQZBMTOFLFMWZPZEKACOYUQQAAXJEIJZTRNGLSBRLVPRVFNUBRLUAZZENVPBVVKZJGXABDIQYNMWGAQOUQIUJFNBRGOZQUVPTBEAUVUACUYQBAAZEUVXREBCLAHROTKOBNLXUGJRNVPDFAZTVBRNZEPFFUZOUZJOUOQNGFNNPWOAOUJREBRSOSXYIAZJFTOLTVNUJRMAYLFUVFGFFSSWIZTNKFQLVNQEAAXGEENGAQJRXBJEPZMIZFNRPATWPNBSKECOYEKFZXLJEEUAFFCMRYMLLSERHKIBRNAJKGJZKRAMFVQNOT"""
    VBTR = pasc.variantbeaufort_tr(ALPHABET)
    length = 10
    (password, score) = guballa.bigram_break_pasc(VARBEAU, VBTR, length)
    # plaintext = "".join(pasc.pasc_decrypt(VARBEAU, password, VBTR))
    # score = compare.quadgramscore(plaintext)
    # print(score, length, password, plaintext)
    assert password == "FOUNDATION"
